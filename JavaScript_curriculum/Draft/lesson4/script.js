// ===================================
// JavaScript配列操作練習用ファイル - Lesson4
// ===================================

// 便利関数：要素を更新してアニメーション効果を追加
function updateElement(elementId, content, type = "default") {
  const element = document.getElementById(elementId);
  if (element) {
    element.textContent = content;
    element.classList.add("updated");

    // 結果の種類に応じてスタイルを変更
    element.classList.remove("success", "warning", "error", "info");
    if (type !== "default") {
      element.classList.add(type);
    }

    setTimeout(() => {
      element.classList.remove("updated");
    }, 600);
  } else {
    console.error(`要素が見つかりません: ${elementId}`);
  }
}

// 便利関数：要素の色を変更
function changeElementColor(elementId, color) {
  const element = document.getElementById(elementId);
  if (element) {
    element.style.color = color;
  }
}

// 便利関数：要素の背景色を変更
function changeElementBackgroundColor(elementId, color) {
  const element = document.getElementById(elementId);
  if (element) {
    element.style.backgroundColor = color;
    element.style.color = "white";
  }
}

// ===================================
// Step1: 配列の基本操作
// ===================================

// L4-S1-1: 果物配列の操作
// 変数名`fruits`に「りんご」「バナナ」「オレンジ」の配列を作成
// 1番目の果物をid="firstFruit"の要素に表示
// ここにコードを書いてください

// L4-S1-2: 色配列の長さ確認
// 変数名`colors`に「赤」「青」「緑」「黄色」の配列を作成
// 配列の長さをid="colorCount"の要素に「色の種類：4個」の形式で表示
// ここにコードを書いてください

// ===================================
// Step2: 配列の全要素表示
// ===================================

// L4-S2-1: 商品一覧表示
// 変数名`products`に「スマホ」「タブレット」「PC」の配列を作成
// for文を使って全商品をid="productList"の要素に「スマホ、タブレット、PC」の形式で表示
// ここにコードを書いてください

// L4-S2-2: 都市リスト表示
// 変数名`cities`に「東京」「大阪」「名古屋」「福岡」の配列を作成
// for文を使って全都市を番号付きでid="cityList"の要素に
// 「1.東京 2.大阪 3.名古屋 4.福岡」の形式で表示
// ここにコードを書いてください

// ===================================
// Step3: 配列要素の個別処理
// ===================================

// L4-S3-1: 価格表示
// 変数名`prices`に100、250、180の配列を作成
// for文を使って全価格に「円」を付けてid="priceList"の要素に
// 「100円、250円、180円」を表示
// ここにコードを書いてください

// L4-S3-2: スコア評価
// 変数名`scores`に85、92、78、95の配列を作成
// for文を使って各スコアをチェックし、90以上なら「🏆」、それ未満なら「📝」を付けて
// id="scoreDisplay"の要素に表示
// ここにコードを書いてください

// ===================================
// Step4: 配列での条件抽出
// ===================================

// L4-S4-1: 成人年齢抽出
// 変数名`ages`に15、25、18、30、16の配列を作成
// for文を使って18歳以上の年齢だけをid="adultAges"の要素に表示
// ここにコードを書いてください

// L4-S4-2: 高温日カウント
// 変数名`temperatures`に22、35、18、28、40の配列を作成
// for文を使って30度以上の気温の個数を数え、id="hotDays"の要素に
// 「暑い日：X日」の形式で赤色で表示
// ここにコードを書いてください

// ===================================
// Step5: 配列への要素追加
// ===================================

// L4-S5-1: カート商品追加
// 変数名`cart`に「商品A」「商品B」の配列を作成
// 「商品C」を配列に追加し、for文を使って更新されたカート内容を
// id="cartItems"の要素に表示
// ここにコードを書いてください

// L4-S5-2: プレイリスト追加
// 変数名`playlist`に「曲1」「曲2」の配列を作成
// 「曲3」「曲4」を追加し、for文を使って全楽曲を
// 「♪曲1 ♪曲2 ♪曲3 ♪曲4」の形式でid="musicList"の要素に青色で表示
// ここにコードを書いてください

// ===================================
// Step6: 配列からの要素削除
// ===================================

// L4-S6-1: タスク削除
// 変数名`tasks`に「タスク1」「タスク2」「タスク3」の配列を作成
// 最後の要素を削除し、for文を使って残りのタスクを
// id="remainingTasks"の要素に表示
// ここにコードを書いてください

// L4-S6-2: 通知削除
// 変数名`notifications`に「通知1」「通知2」「通知3」「通知4」の配列を作成
// 最初の要素を削除し、for文を使って残った通知を
// 「🔔通知2 🔔通知3 🔔通知4」の形式でid="activeNotifications"の要素に表示し、
// 残り件数をコンソールに出力
// ここにコードを書いてください

// ===================================
// Step7: 配列の検索機能
// ===================================

// L4-S7-1: ユーザー検索
// 変数名`users`に「田中」「佐藤」「鈴木」の配列を作成
// for文を使って「佐藤」が含まれているかチェックし、
// 見つかれば「ユーザーが見つかりました」をid="searchResult"の要素に緑色で表示
// ここにコードを書いてください

// L4-S7-2: 商品在庫検索
// 変数名`inventory`に「商品A」「商品B」「商品C」の配列を作成
// for文を使って「商品D」を検索し、見つからなければ
// 「商品が見つかりません」をid="itemStatus"の要素に赤色で表示し、
// 検索対象をコンソールに出力
// ここにコードを書いてください

// ===================================
// Step8: 複数配列の連携処理
// ===================================

// L4-S8-1: 商品と価格の組み合わせ
// 変数名`itemNames`に「スマホ」「タブレット」の配列、
// 変数名`itemPrices`に50000、80000の配列を作成
// for文を使って対応する商品と価格を
// 「スマホ:50000円、タブレット:80000円」の形式でid="itemList"の要素に表示
// ここにコードを書いてください

// L4-S8-2: 上位プレイヤー表示
// 変数名`playerNames`に「Alice」「Bob」「Charlie」の配列、
// 変数名`playerScores`に120、95、140の配列を作成
// for文を使ってスコアが100以上のプレイヤーだけを
// 「🏆Alice(120) 🏆Charlie(140)」の形式でid="topPlayers"の要素に金色で表示
// ここにコードを書いてください

// ===================================
// Step9: 動的リスト管理
// ===================================

// L4-S9-1: コメント管理
// 変数名`comments`に「いいね！」「参考になります」の配列を作成
// 「ありがとうございます」を追加し、for文を使って全コメントを
// 「💬いいね！ 💬参考になります 💬ありがとうございます」の形式で
// id="commentSection"の要素に表示
// ここにコードを書いてください

// L4-S9-2: チャット履歴
// 変数名`messages`に「おはよう」「こんにちは」「お疲れ様」の配列、
// 変数名`times`に「10:00」「12:00」「18:00」の配列を作成
// for文を使って各メッセージに時刻を組み合わせ、
// 「10:00 おはよう」の形式でid="chatHistory"の要素に表示し、
// メッセージ数をコンソールに出力
// ここにコードを書いてください

// ===================================
// Step10: 総合的な配列操作
// ===================================

// L4-S10-1: 在庫レポート
// 変数名`productNames`に「商品A」「商品B」「商品C」の配列、
// 変数名`stockCounts`に15、0、8の配列を作成
// for文を使って在庫状況をチェックし、在庫ありなら「✅商品A(15個)」、
// 在庫なしなら「❌商品B(売切)」の形式でid="stockReport"の要素に色分けして表示
// ここにコードを書いてください

// L4-S10-2: 合格者管理
// 変数名`studentNames`に「太郎」「花子」「次郎」の配列、
// 変数名`testScores`に85、92、78の配列を作成
// for文を使って合格者（80点以上）だけを抽出し、
// 合格者リストをid="passedStudents"の要素に「🎓太郎(85) 🎓花子(92)」の形式で緑色で表示し、
// 合格者数をid="passCount"の要素に表示
// ここにコードを書いてください
