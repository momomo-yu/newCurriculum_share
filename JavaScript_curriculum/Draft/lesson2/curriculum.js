// ===================================
// 提出課題 - Step2: DOM操作
// ===================================

// このファイルは提出課題用です
// すべての課題を完成させて、このファイルを提出してください

// ===================================
// Step1: 要素の取得
// ===================================

// L2-S1-1: 要素取得の基本
// ID「header」の要素を取得して、コンソールに表示してください
// ここにコードを書いてください

// L2-S1-2: セレクタ使用
// クラス「menu-item」の最初の要素を取得して、コンソールに表示してください
// ここにコードを書いてください

// ===================================
// Step2: テキスト内容の操作
// ===================================

// L2-S2-1: テキスト内容変更
// ID「title」の要素のテキスト内容を「新しいタイトル」に変更してください
// ここにコードを書いてください

// L2-S2-2: HTML内容変更
// ID「content」の要素のHTML内容を「<p>更新されました</p>」に変更してください
// ここにコードを書いてください

// ===================================
// Step3: 属性の操作
// ===================================

// L2-S3-1: 画像のsrc属性変更
// ID「main-image」の要素のsrc属性を「new-image.jpg」に変更してください
// ここにコードを書いてください

// L2-S3-2: 要素のclass属性操作
// ID「button」の要素にclass属性「active」を設定してください
// ここにコードを書いてください

// ===================================
// Step4: スタイルの操作
// ===================================

// L2-S4-1: 直接スタイル変更
// ID「box」の要素の背景色を赤色、文字色を白色に変更してください
// ここにコードを書いてください

// L2-S4-2: クラス操作
// ID「card」の要素にCSSクラス「highlight」を追加してください
// ここにコードを書いてください

// ===================================
// Step5: イベント処理
// ===================================

// L2-S5-1: ボタンクリック処理
// ID「click-btn」のボタンにクリックイベントリスナーを追加し、
// クリック時に「ボタンがクリックされました！」をアラート表示してください
// ここにコードを書いてください

// L2-S5-2: 入力値変更処理
// ID「text-input」の入力フィールドにchangeイベントリスナーを追加し、
// 値が変更されたときに新しい値をコンソールに表示してください
// ここにコードを書いてください

// ===================================
// Step6: 要素の作成と削除
// ===================================

// L2-S6-1: 新しい要素作成と追加
// 新しいp要素を作成し、テキスト「新しい段落です」を設定して、
// ID「container」の要素に追加してください
// ここにコードを書いてください

// L2-S6-2: 要素の削除
// ID「delete-target」の要素を親要素から削除してください
// ここにコードを書いてください

// ===================================
// Step7: フォーム操作
// ===================================

// L2-S7-1: 入力値の取得と設定
// ID「name-input」の入力フィールドの値を取得し、
// ID「display-name」の要素に表示してください
// ここにコードを書いてください

// L2-S7-2: チェックボックス操作
// ID「agree-checkbox」のチェックボックスの選択状態を確認し、
// 選択されていれば「同意済み」、そうでなければ「未同意」をコンソールに表示してください
// ここにコードを書いてください

// ===================================
// Step8: 条件付きDOM操作
// ===================================

// L2-S8-1: 条件による表示切り替え
// 変数名`isVisible`にtrueを保存し、trueなら「visible」要素を表示、
// falseなら非表示にしてください
// ここにコードを書いてください

// L2-S8-2: 入力値による条件分岐
// ID「age-input」の入力値を取得し、18以上なら「成人」、
// 未満なら「未成年」をID「age-result」に表示してください
// ここにコードを書いてください

// ===================================
// Step9: ループとDOM操作
// ===================================

// L2-S9-1: 配列データのリスト表示
// 配列`fruits`に["りんご", "みかん", "バナナ"]を保存し、
// forEachを使ってli要素を作成してID「fruit-list」のulに追加してください
// ここにコードを書いてください

// L2-S9-2: 動的テーブル作成
// 配列`students`に[{name: "田中", score: 85}, {name: "佐藤", score: 92}]を保存し、
// テーブル行を動的に作成してID「student-table」のtbodyに追加してください
// ここにコードを書いてください

// ===================================
// Step10: 実践的なDOM操作
// ===================================

// L2-S10-1: 簡単なTodoアプリ
// ID「todo-input」の入力値を取得し、新しいli要素を作成して
// ID「todo-list」に追加する機能を実装してください
// 各アイテムには削除ボタンも含めてください
// ここにコードを書いてください

// L2-S10-2: モーダル表示機能
// ID「open-modal」ボタンをクリックしたときにID「modal」を表示し、
// ID「close-modal」ボタンまたはモーダル背景をクリックしたときに非表示にしてください
// ここにコードを書いてください

// L2-S10-3: タブ切り替え機能
// 複数のタブボタン（.tab-button）をクリックしたときに、
// 対応するタブコンテンツ（.tab-content）を表示し、他を非表示にしてください
// ここにコードを書いてください

// L2-S10-4: フォームバリデーション
// ID「email-input」の入力値が有効なメールアドレス形式かチェックし、
// 無効な場合はエラーメッセージを表示してください
// ここにコードを書いてください

// L2-S10-5: 画像ギャラリー
// クラス「thumbnail」の画像をクリックしたときに、
// その画像をID「main-view」に大きく表示する機能を実装してください
// ここにコードを書いてください

// ===================================
// 提出前チェックリスト
// ===================================

/*
□ すべてのステップが完成している
□ getElementById、querySelector を正しく使用している
□ textContent、innerHTML を適切に使い分けている
□ getAttribute、setAttribute を使用している
□ style プロパティと classList を使用している
□ addEventListener を使用している
□ createElement、appendChild を使用している
□ フォーム要素のvalue、checkedを使用している
□ 条件分岐でDOM操作を制御している
□ ループを使った動的な要素作成ができている
□ 実践的なWebアプリケーション機能を実装している
□ エラーが発生していない
□ コメントで説明が書かれている

完成したら、このファイル（curriculum.js）を提出してください。
*/